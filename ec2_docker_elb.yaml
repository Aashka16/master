---
- name: Provision an EC2 Instance
  hosts: local
  connection: local
  gather_facts: False
  vars:
    instance_type: t2.micro
    security_group: AnsibleSG
    image: ami-5b673c34
    keypair: NewForAnsible                       
    region: ap-south-1 
    count: 2
   
  tasks:
    - name: Create a security group
      ec2_group:
        name: "{{ security_group }}"
        description: Security Group for webserver Servers
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          

    - name: Launch the new EC2 Instance
      ec2: 
        group: "{{ security_group }}" 
        instance_type: "{{ instance_type}}" 
        image: "{{ image }}" 
        wait: true 
        region: "{{ region }}" 
        keypair: "{{ keypair }}"
        instance_tags:
          Name: DockerEC2Ins
        exact_count: 2
        count_tag:
          Name: DockerEC2Ins
        vpc_subnet_id: subnet-805ba0e8
        assign_public_ip: yes
      register: ec2
      
    - name: Wait for SSH to come up
      wait_for: 
        host={{ item.public_ip }}
        port=22
        delay=60
        timeout=180
        state=started
      with_items: "{{ ec2.instances }}"
     
    - name: add server ip addresses to hosts group
      add_host: hostname={{ item.public_ip }} groupname=launched
      with_items: "{{ ec2.instances }}"

    - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
      lineinfile:
        dest="/etc/ansible/hosts"
        regexp={{ item.public_ip }}
        insertafter="[DockerServer]" line={{ item.public_ip }} 
      with_items: "{{ ec2.instances }}"

- hosts: launched
  remote_user: ec2-user
  become: true
  become_method: sudo
  gather_facts: False
  tasks:
    - name: Install HTTP
      yum:
        name: httpd
        state: latest
    - name: Enable EPEL
      shell: yum-config-manager --enable rhui-REGION-rhel-server-extras
    - name: Install Docker
      yum: 
        name: docker
        state: latest
    - name: Start Docker Service
      service:
        name: docker
        state: started
    - name: Create Nginx Container
      shell: docker run --name docker-nginx -p 80:80 -d nginx
    - name: Copy file from Ansible to EC2
      copy:
        src: /tmp/index.html
        dest: /tmp/index.html
    - name: Copy file from EC2 to Container
      shell: docker cp /tmp/index.html docker-nginx:/usr/share/nginx/html/

- name: Spin up the load balancer and add the servers to it
  hosts: local
  connection: local
  gather_facts: False
  tasks:
    - name: Setup a simple load balancer
      ec2_elb_lb:
        name: aws-elb-demo
        state: present
        region: ap-south-1
        security_group_names: AnsibleSG
        zones:
          - ap-south-1a
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
        health_check:
          ping_protocol: tcp 
          ping_port: 80
          response_timeout: 5 
          interval: 10 
          unhealthy_threshold: 2
          healthy_threshold: 2
      register: aws-elb-demo

    - name: Add the webservers to the load balancer
      local_action: ec2_elb
      args:
        instance_id: "{{ item.id }}"
        ec2_elbs: aws-elb-demo
        state: present
        region: ap-south-1
      with_items: "{{ ec2.instances }}"

